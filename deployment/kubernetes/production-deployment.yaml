apiVersion: v1
kind: ConfigMap
metadata:
  name: av-separation-config
  namespace: av-separation
data:
  ENV: "production"
  LOG_LEVEL: "INFO"
  REDIS_URL: "redis://redis-service:6379"
  DATABASE_URL: "postgresql://user:password@postgres-service:5432/av_separation"
  PROMETHEUS_MULTIPROC_DIR: "/tmp/prometheus"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: av-separation-api
  namespace: av-separation
  labels:
    app: av-separation-api
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: av-separation-api
      version: v1
  template:
    metadata:
      labels:
        app: av-separation-api
        version: v1
    spec:
      containers:
      - name: av-separation-api
        image: av-separation:production
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: av-separation-config
        env:
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: av-separation-secrets
              key: database-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: av-separation-secrets
              key: redis-password
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: models
          mountPath: /app/models
        - name: tmp
          mountPath: /tmp
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: false  # Needed for tmp files
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir: {}
      - name: models
        persistentVolumeClaim:
          claimName: av-separation-models-pvc
      - name: tmp
        emptyDir: {}
      serviceAccountName: av-separation-service-account
      securityContext:
        fsGroup: 1000

---
apiVersion: v1
kind: Service
metadata:
  name: av-separation-service
  namespace: av-separation
  labels:
    app: av-separation-api
spec:
  selector:
    app: av-separation-api
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  type: ClusterIP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: av-separation-hpa
  namespace: av-separation
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: av-separation-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60

---
apiVersion: v1
kind: Secret
metadata:
  name: av-separation-secrets
  namespace: av-separation
type: Opaque
stringData:
  database-password: "your-secure-database-password"
  redis-password: "your-secure-redis-password"
  jwt-secret: "your-jwt-secret-key"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: av-separation-service-account
  namespace: av-separation

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: av-separation-role
  namespace: av-separation
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: av-separation-role-binding
  namespace: av-separation
subjects:
- kind: ServiceAccount
  name: av-separation-service-account
  namespace: av-separation
roleRef:
  kind: Role
  name: av-separation-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: av-separation-models-pvc
  namespace: av-separation
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: av-separation-network-policy
  namespace: av-separation
spec:
  podSelector:
    matchLabels:
      app: av-separation-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: av-separation
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  - to: []  # Allow external traffic for model downloads, etc.
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
