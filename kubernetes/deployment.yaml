# Kubernetes Deployment for AV-Separation-Transformer
apiVersion: v1
kind: Namespace
metadata:
  name: av-separation
  labels:
    name: av-separation
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: av-separation-config
  namespace: av-separation
data:
  LOG_LEVEL: "INFO"
  PROMETHEUS_ENABLED: "true"
  MODEL_CACHE_SIZE: "1000"
  MAX_WORKERS: "4"
  REDIS_URL: "redis://av-separation-redis:6379"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: av-separation-secrets
  namespace: av-separation
type: Opaque
data:
  # Base64 encoded values
  sentry-dsn: ""  # echo -n "your-sentry-dsn" | base64
  api-key: ""     # echo -n "your-api-key" | base64

---
# Persistent Volume Claim for model storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: av-separation-models-pvc
  namespace: av-separation
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: nfs-client  # Adjust based on your storage class

---
# Persistent Volume Claim for logs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: av-separation-logs-pvc
  namespace: av-separation
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: nfs-client

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: av-separation-redis
  namespace: av-separation
  labels:
    app: av-separation-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: av-separation-redis
  template:
    metadata:
      labels:
        app: av-separation-redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        args:
          - redis-server
          - --appendonly
          - "yes"
          - --maxmemory
          - "1gb"
          - --maxmemory-policy
          - "allkeys-lru"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
              - redis-cli
              - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
              - redis-cli
              - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: av-separation-redis
  namespace: av-separation
spec:
  selector:
    app: av-separation-redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP

---
# AV-Separation API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: av-separation-api
  namespace: av-separation
  labels:
    app: av-separation-api
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: av-separation-api
  template:
    metadata:
      labels:
        app: av-separation-api
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: av-separation-api
        image: av-separation-transformer:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: PYTHONPATH
          value: "/app"
        envFrom:
        - configMapRef:
            name: av-separation-config
        - secretRef:
            name: av-separation-secrets
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: models-storage
          mountPath: /app/models
        - name: logs-storage
          mountPath: /app/logs
        - name: tmp-storage
          mountPath: /app/tmp
      volumes:
      - name: models-storage
        persistentVolumeClaim:
          claimName: av-separation-models-pvc
      - name: logs-storage
        persistentVolumeClaim:
          claimName: av-separation-logs-pvc
      - name: tmp-storage
        emptyDir:
          sizeLimit: 1Gi

---
# AV-Separation API Service
apiVersion: v1
kind: Service
metadata:
  name: av-separation-api-service
  namespace: av-separation
  labels:
    app: av-separation-api
spec:
  selector:
    app: av-separation-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
      name: http
  type: ClusterIP

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: av-separation-api-hpa
  namespace: av-separation
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: av-separation-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: av-separation-ingress
  namespace: av-separation
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.av-separation.com
    secretName: av-separation-tls
  rules:
  - host: api.av-separation.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: av-separation-api-service
            port:
              number: 80

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: av-separation-network-policy
  namespace: av-separation
spec:
  podSelector:
    matchLabels:
      app: av-separation-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: av-separation-redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: av-separation-api-pdb
  namespace: av-separation
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: av-separation-api

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: av-separation-api-monitor
  namespace: av-separation
  labels:
    app: av-separation-api
spec:
  selector:
    matchLabels:
      app: av-separation-api
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s